Apuntes primera clase

Para hacer el git init debemos estar la carpeta principal, para un sitio web, la carpeta donde se encuentra
 el index.html por ejemplo, o en el desarrollo de una aplicación donde esta la carpeta principal de archivos.
principalmente estamos en nuestro directorio

los cambios antes del commit estan en staging que esta en la RAM

luego de hacer el commit se va al .git al repositorio, master

git log para ver el log de cambios

git add para que el archivo vaya al staging y sea trackeado

git commit para que los cambios suban al repositorio

git diff para comparar dos versiones

git show para mostrar el ultimo commit realizado

git rm --cached para deshacer el add.

checkout traes los ultimos cambios que estan en el repositorio pero no en local, tambien puedes traer una
version especifica o unicamente unos archivos especificos.

Las branch "ramas" consiste en romper en diferentes lineas de tiempo un mismo proyecto (con el fin de que 
distintas personas trabajen partes diferentes del mismo proyecto - en una pagina web alguien trabaja 
el footer otra personas el header y alguien el main o contenido central) y en un punto estas lineas de tiempo
se unen, estas branch

cuando requiro unir dos ramas realizo un merge

git reset  para volver a una versión anterior de manera agresiva
--hard para que sea volver del todo
--soft para conservar lo que tengo en el staging

con checkout podemos ver versiones anterioes y si las estamos viendo podemos
hacer un commit para restaurar de esa manera, y si queremos volver
a la versión que esta en el repositorio entonces simplemente hacemos un checkout
de master del archivo en cuestión


Diferencias entre git reset and git rm

con rm puedo puedo eliminar archivos locales y en staging pero no borrar el historial de 
cambios, por lo que puedo volver a versiones anteriores en las que tenia el archivo que 
fue eliminado
con rm --cached se elimina el archivo en staging y del repositorio local, pero lo mantiene en
nuestro disco duro.
con rm --force se seliminan los archivos del repositorio y del disco duro, pero se puede 
recuperar con comandos avanzados.

Con reset se vuelve a una versión anterior sin capacidad de volver al futuro.
no hay vuelta atras.

reset tambien se puede utilizar para sacar un archivo del staging sin que 
esto genere un cambio en el historial como pasaria con git rm
entonces sacamos el archivo de staging, realizamos cambios y volvemos a 
hacer un add para entonecs si hacer el commit.



Repositorios remotos!!!!!!

en el ciclo de trabajo que ya tengo claro agrego un push al final que es lo que sube mis cambios al 
repositorio remoto. 
antes de eso pues es lo mismo que ya conocía, el add, el commit
y para iniciar con un repositorio remoto en lugar de hacer un init 
hago un clone
git clone url
esto trae el repositorio a mi repo local.

para traer un cambio que alguien realizó en el repo remoto hago un fetch.
esto lo trae a mi repositorio local pero no a mis archivos del disco duro
para esto debo unir mi repo local con mi disco duro mediante un merge

pero para no hacer todo este proceso puedo hacer un pull, este pull es la fusión de 
ambos comandos.

Ramas branch!:!!:!!:uno:

creo una branch con git branch <nombre> y aqui tengo una copia del ultimo commit de
master y del log de cambios

todo lo que haga aqui debe ser guardado con un commit si en algun momento quiero hacer un 
checkout a master para que estos cambios no se pierdan.

cuando finalice con mis cambios en este nuevo branch puedo hacer un merge desde la rama master
siempre se hace desde la rama que quiero mantener, si lo hiciera desde la rama alterna y solo
tengo dos ramas pues esta rama se convertiría en mi rama principal.

si no se hicieron cambios en las mismas lineas de codigo en diferentes ramas, a la hora de hacer
el  merge no se presentaran conflictos y todo saldrá bien. si se realizaron cambios a la misma linea o 
se presenta algun tipo de conflicto se realizará algo respecto

un merge es un commit por lo que debe llevar un mensaje descriptivo. 

MERGE con conflictos:!!!!!!!

aparecen lineas de sintaxis de conflicto en el codigo y tengo dos opciones
1. solucionar el conflicto eligiendo con que cambios quedarme de cada branch
2. abortar el merge.



GIT HUB!:

realicé la creación de un repositorio nuevo en mi perfil de github

a continuación obtuve el url (https method)

y para linkear mi repositorio local al remoto hice lo siguiente

git remote add origin <url obtenido de mi repo en github>

luego realicé el primer push para actualizar el repo remoto

git push origin main

para esto ingresé mis credenciales de github pero en lugar de mi contraseña
tuve que crear un "PAT" personal acces token, desde github, y con este realizar
la autenticación.

luego para poder hacer correctamente el push tuve que utilizar:

git config pull.rebase false

luego para evitar conlictos al traer el readme del repo remoto se usó el siguiente comand

git pull origin main --allow-unrelated-histories

con este acepté el historial de archivos inexistentes en mi repo local osea el archivo readme

y listo. A continuación realicé algunas pruebas haciendo commits en local y push y posteriormente
haciendo commits en el repo remoto y pull.

*SEE SSH file*

Se creó un alias para el comando 
git log --all --graph --decorate --oneline
lo llamamos gittree

alias gittree="git log --all --graph --decorate --oneline"



posteriormente con estas versiones de los log se creó le 
primer tag "tag v0.1"
 mediante el comando 

git tag -a v0.1 -m "message" <reference to log>

luego para verlo podemos usar git show-ref --tag

a continuación para enviar esta información al repo 
remoto se utiliza 

git push origin --tags

y asi queda en el repositorio remoto.

Para eliminar un tag:

git tag -d <tag>

esto lo elimina localmente y los cambios no se veran 
reflejados en remoto aunque hagamos un 
git push origin --tags

por lo que si se requiere eliminiar un tag del remoto
tambien podemos utilizar

git push origin :refs/tags/<tag>

y de esta manera se elimina el tag

branch's on github!!

con gitk tengo una vista mas grafica en un software de git
de mis branch's y tags

para enviar nuevas branch creadas en local simplemente 
hago un push de esa nueva rama y listo

en este caso 

git branch footer
git pull origin main         ->  siempre obtengo los cambios
mas recientes antes de hacer un push

git push origin footer

y listo.


Pull request from collaborators!!.
}
si necesito realizar un cambio importante en mi proyecto, generalmente crearé una rama
para no afectar directamente mi rama main y poder trabajar con la ultima versión
de esta, en esta nueva rama realizaré los cambios para posteriormente 
solicitar un pull request y que mi equipo de trabajo puedo hacer un review
antes de aceptar un merge a la rama main

a la hora de realizar este review los colaboradores pueden aprovar el merge y relizarlo,
o solicitar cambios, o realizar comentarios al pull request.

esto con pull request desde la organización, pero tambien se realizan desde fuera por 
personas que no son colaboradores, en proyectos de codigo abierto esto es muy importante.


FORK:!:!:!:

un fork es tomar un repo y copiar todo su contenido en un repo en mi propio perfil
a partir de aqui puedo realizar cambios y clonar este fork a mi maquina local
este fork no se mantiene actualizado con el repo original a menos que le haga un 
pull y lo actualice manualmente 

cuando tengo el repo fork en local puedo agragar otro remoto con

git remote add upstream url, donde upstream es el nombre que normalmente se da 
al repositorio original del cual obtendrás las actualizaciones y el url pues es
la url del repo original.

desde github tengo la opción de mandar pull request directamente desde mi fork al
repo original.

.GITIGNORE

son malas practicas tener archivos binarios en los repositorios, asi como puede ser inseguro 
tener algunos archivos subidos y disponibles para el publico

para esto existe el archivo gitignore, aqui van los archivos que no queremos subir al repositorio
como recursos o contraseñas o algunas librerias etc.

en el caso de los archivos binarios como imagenes, pueden ser manejados de manera externa, referenciando directamente
el link o subiendo la imagen en algun servicio para subir imagenes.


README.md

los archivos md >markdown< son archivos que aceptan html y tienen otros formatos
en este tió de archivo se edita wikipedia

para editar este tipo de archivos hay un editor online llamado panda editor md y
con ayuda de este podemos hacer mas lindo nuestros archivos md.

En el readme.md nosotros mostramos un about de nuestro repo y alguna información
relevante para el usuario.

GIT REBASE:!:!:!:!

utilizar para realizar cambios en local ya que esto es una mala practica porque cambia la historia del 
repo.

si necesitamos realizar cambios en otra rama para arreglar bugs o algo asi podemos crear otra rama
realizar los cambios

desde la nueva rama hacer
git rebase main
para obtener los cambios de main

luego desde main hacer
git rebase <rama de cambios>

y esto no cambias en la historia y los cambios fueron realizados.

utiliziar en local unicamente }

y recordar el orden

primero desde la rama de prueba hacer rebase a main y luego

desde main hacer rebase a la rama de prueba.


STASH!!!!!

para realizar pequeños experimentos que no merecen la pena como para abrir un branch
o para dejar en stand by los cambios realizados antes del commit

nos sirve git stash

para regresar el stash que tenemos en stand by usamos git stash pop
y para descartar estos cambios tenemos git stash drop

y para ver que stash tenemos 

git stash list

tambien podemos crear un stash en una rama nueva con 

git stash branch <branch-name>


y dentro podemos hacer un commit con estos cambios que queriamos guardar en stash


______________________________________________________________________________________

GIT CLEAN!!!!

en caso de crear archivos por error o tener archivos basura el comando git clean nos ayuda a 
limpiar esto y no tener que hacerlo manualmente

con

git clean --dry-run

obtenemos una lista de que archivos serán eliminados para review 

y con git clean -f

se van a eliminar estos archivos

importante: a git no le interesan los directorios sino unicamente los archivos, asi que
si tenemos carpetas basura estas deberemos eliminarla manualmente.

CHERRY-PICK:!:!:!:!

cuando avanzamos en una rama alterna y en el main necesitamos uno de los cambios de 
esta rama alterna pero no toda la rama podemos utilizar esto.

git cherry-pick <id del commit de la otra rama>

hay que tener cuidado con esto ya que esto es como realizar un commit sin confirmación
entonces el cambio se ve reflejado inmediatamente en la rama desde la que lo hayamos realizado

plottwist: Cherry pick es una mala practica xd

-
-
-_________________________________________________________________________________________________
-
-RESET!!!!
-
-usos practicos para el reset xd
-si en algún momento por error todo se rompe o se eliminó un archivo importante y se le hizo commit
-y ahora todo se fue al  carajo 
-
-podemos hacer un reset --HARD a una versión anterior
-
-entonces con git reflog obtenemos la lista de logs
-
-allí buscamos el hash de la versión donde todo estaba bien
-
-y utilizamos desde la rama que queremos recuperar
-
-git reset --HARD <hash de l a versión>
-
-y listo :)
